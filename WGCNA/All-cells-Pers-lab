###  WGCNA of all cells from Pers lab ###

# Load packages
library(WGCNA)
library(flashClust)
library(dplyr)
library(Matrix)
library(ggplot2)
library(Seurat)
library(gProfileR)


# Load Pers lab preprocessed data 
load("~/ygg-projects/mludwig/Data/All_cells/Pers_all_cells_preprocessed.RData")


# Find variable genes 
pers <- FindVariableGenes(pers, do.plot=F)


# Perform linear dimensional reduction
pers <- RunPCA(object = pers, pc.genes = pers@var.genes, do.print = FALSE, pcs.print = 1:5, 
               genes.print = 5, pcs.compute = 100, fastpath = FALSE, maxit = 300)

pers <- ProjectPCA(object = pers, do.print = FALSE)

# Decide on the number of PCs to include downstream
# Knee plot
PCElbowPlot(object = pers, num.pc = 100)

# Heatmaps
PCHeatmap(object = pers, pc.use = 1:9, cells.use = 500, do.balanced = TRUE, 
          label.columns = FALSE, use.full = FALSE)
PCHeatmap(object = pers, pc.use = 10:18, cells.use = 500, do.balanced = TRUE, 
          label.columns = FALSE, use.full = FALSE)
PCHeatmap(object = pers, pc.use = 19:27, cells.use = 500, do.balanced = TRUE, 
          label.columns = FALSE, use.full = FALSE)

num.PCs <- 15

# Normalized expression counts of top 500 variable genes
pca.genes <- pers@dr$pca@gene.loadings.full[,c(1:num.PCs)]
pca.genes <-abs(pca.genes)
pca.genes <- apply(pca.genes, 1, function(x) max(x))
pca.genes <- names(pca.genes[order(-pca.genes)])[1:5000]
ExprMat <- t(pers@data[rownames(pers@data) %in% pca.genes,])


## Choose the soft threshold power beta
# Calculate potential thresholds
SubGeneNames <- colnames(ExprMat)
powers = c(c(1:10), seq(from = 12, to = 20, by = 2))

sft <- pickSoftThreshold(ExprMat, dataIsExpr = TRUE, powerVector = powers, corFnc = "cor", blockSize = ncol(ExprMat),
                         corOptions = list(use = "p"), networkType = "signed")

# Plot scale independence
par(mfrow = c(1,1));
cex1 <- 0.9
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], 
     xlab = "Soft Threshold (power)",
     ylab = "Scale Free Topology Model Fit, signed R^2", 
     type="n", main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], labels = powers, cex = cex1,
     col = "red");
abline(h=0.80, col="red")


# Choose theshold based on where scale independence plot plateaus (beginning of plateau) or local maximum
softPower <- 10 


## WGCNA

# Compute TOM dissimilarity 
TOM <- TOMsimilarityFromExpr(ExprMat, networkType = "signed", TOMType = "signed", power = softPower);
colnames(TOM) <- rownames(TOM) <- SubGeneNames
dissTOM <- 1-TOM

# Cluster the TOM dissimilarity matrix
geneTree <- flashClust(as.dist(dissTOM), method="complete") 
plot(geneTree, xlab="", sub="", cex=0.7, labels = FALSE)

# Tree cutting
minModuleSize <- 20
dynamicMods <- cutreeDynamic(dendro = geneTree, distM = dissTOM, method = "hybrid", 
                             deepSplit = 1, 
                             pamRespectsDendro = T, minClusterSize = minModuleSize)
dynamicColors <- labels2colors(dynamicMods) # Label each module with a unique color

# Plot the modules with colors
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut", dendroLabels = FALSE, 
                    hang = 0.03, 
                    addGuide = TRUE, guideHang = 0.05, main = "Gene dendrogram and module colors") 


# Compute module Eigengenes
ExprMat <- as.matrix(ExprMat) 
MEs <- moduleEigengenes(ExprMat, dynamicColors)$eigengenes  


## Merge modules that have a Pearson correlation > 0.8
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs)
# Cluster module eigengenes
METree = flashClust(as.dist(MEDiss), method = "average");

# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
     xlab = "", sub = "")
MEDissThres = 0.20
abline(h=MEDissThres, col = "red")

# Merge modules
merge <- mergeCloseModules(ExprMat, dynamicColors, MEs=NULL, useSets=NULL, impute = T, checkDataFormat=T, 
                           corFnc = cor, corOptions=list(use='p'), useAbs = F, cutHeight = 0.25, verbose = 3)

# The merged module colors
mergedColors = merge$colors;

# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs

plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
                    c("Dynamic Tree Cut", "Merged dynamic"),
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)

rownames(mergedMEs) <- rownames(ExprMat) 


# Build network object 
gene.assignments <- data.frame(mergedColors)

rownames(gene.assignments) <- colnames(ExprMat) # assign gene names as row names

module.names <- gsub("ME", "", colnames(mergedMEs)) 

Network = list() 
for (i in 1:length(module.names)){
  genes <- which(gene.assignments == module.names[i])
  Network[[i]] <- rownames(gene.assignments)[genes]
}

names(Network) <- module.names



## Cell type classification

Neurons <- c("Neuron_1", "Neuron_2")
Endothelial_cells <- c("Endothelial_2", "Endothelial_3") 
Ependymal_cells <- c("Endothelial_1_Ependymal")
Astrocytes <- c("Astrocyte_1", "Astrocyte_2")
Tanycytes <- c("Tanycyte_1", "Tanycyte_2")
Oligodendrocytes <- c("Oligodendrocyte_1", "Oligodendrocyte_3")
OPCs <- c("Oligodendrocyte_2_OPC")
Microglia <- c("Microglia_1", "Microglia_2") 
VLMCs <- c("Vascular_and_leptomeningial")
Red_blood_cells <- c("Red_blood_cell")
Pars_tuberalis <- c("Unknown_3_Pars_tuberalis")
Unknown <- c("Unknown_1_Mix", "Unknown_2_Mural")


pers@meta.data$major_cell_type <- ""
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% Neurons] <- "Neurons"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% Endothelial_cells] <- "Endothelial cells"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% Ependymal_cells] <- "Ependymal cells"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% Astrocytes] <- "Astrocytes"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% Tanycytes] <- "Tanycytes"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% Oligodendrocytes] <- "Oligodendrocytes"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% OPCs] <- "OPCs"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% Microglia] <- "Microglia"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% Red_blood_cells] <- "Reed blood cells"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% Pars_tuberalis] <- "Pars tuberalis cells"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% VLMCs] <- "VLMCs"
pers@meta.data$major_cell_type[pers@meta.data$cell_type %in% Unknown] <- "Unassigned cell types"


# t-SNE
pers <- RunTSNE(object = pers, dims.use = 1:15, do.fast = TRUE)

# Plot by cell type
TSNEPlot(object = pers, do.return = T, do.label = F, group.by = "major_cell_type") +
  scale_color_manual(values = c("deeppink4", "orange2", "olivedrab3", "green3", "forestgreen", "turquoise3", "navyblue",
                                "blueviolet", "gold4", "hotpink1", "maroon3", "lightblue4")) + 
  xlab("t-SNE 1") + ylab("t-SNE 2")
ggsave("Pers_cell_types.pdf", height = 4, width = 6)



# Inspect the expression of the modules
pers.save <- pers
pers@meta.data <- cbind(pers@meta.data, mergedMEs)
FeatureHeatmap(pers, features.plot = "MEpurple", group.by='orig.ident') 
FeatureHeatmap(pers, features.plot = "MEred", group.by='orig.ident') 
FeatureHeatmap(pers, features.plot = "MEblue", group.by='orig.ident')
FeatureHeatmap(pers, features.plot = "MEmagenta", group.by='orig.ident') 
FeatureHeatmap(pers, features.plot = "MEturquoise", group.by='orig.ident') 
FeatureHeatmap(pers, features.plot = "MEtan", group.by='orig.ident') 
FeatureHeatmap(pers, features.plot = "MEgreen", group.by='orig.ident')  
FeatureHeatmap(pers, features.plot = "MEpink", group.by='orig.ident') 
FeatureHeatmap(pers, features.plot = "MEblack", group.by='orig.ident') 
FeatureHeatmap(pers, features.plot = "MEcyan", group.by='orig.ident') 


## Change Seurat FeatureHeatmap function for nice plotting
FeatureHeatmapUpdated <- function(
  object,
  features.plot,
  dim.1 = 1,
  dim.2 = 2,
  idents.use = unique(x = object@ident),
  pt.size = 2,
  cols.use = c("grey", "red"),
  pch.use = 16,
  reduction.use = "tsne",
  group.by = NULL,
  data.use = 'data',
  sep.scale = FALSE,
  do.return = FALSE,
  min.exp = -Inf,
  max.exp = Inf,
  rotate.key = FALSE,
  plot.horiz = FALSE,
  key.position = "right"
) {
  switch(
    EXPR = data.use,
    'data' = {
      use.imputed <- FALSE
      use.scaled <- FALSE
    },
    'scale.data' = {
      use.imputed <- FALSE
      use.scaled <- TRUE
    },
    'imputed' = {
      use.imputed <- TRUE
      use.scaled <- FALSE
    },
    stop("Invalid dataset to use")
  )
  if (!is.null(x = group.by)) {
    object <- SetAllIdent(object = object, id = group.by)
  }
  #idents.use <- SetIfNull(x = idents.use, default = sort(x = unique(x = object@ident)))
  par(mfrow = c(length(x = features.plot), length(x = idents.use)))
  dim.code <- GetDimReduction(
    object = object,
    reduction.type = reduction.use,
    slot = 'key'
  )
  dim.codes <- paste0(dim.code, c(dim.1, dim.2))
  data.plot <- data.frame(FetchData(
    object = object,
    vars.all = c(dim.codes, features.plot),
    use.imputed = use.imputed,
    use.scaled = use.scaled
  ))
  colnames(x = data.plot)[1:2] <- c("dim1", "dim2")
  data.plot$ident <- as.character(x = object@ident)
  data.plot <- data.plot[data.plot$ident %in% idents.use,] # keep only identities defined in idents.use
  data.plot$cell <- rownames(x = data.plot)
  features.plot <- gsub('-', '\\.', features.plot)
  data.plot  %>% gather(key = "gene", value = "expression", -dim1, -dim2, -ident, -cell) -> data.plot
  if (sep.scale) {
    data.plot %>% group_by(ident, gene) %>% mutate(scaled.expression = expression) -> data.plot
  } else {
    data.plot %>%  group_by(gene) %>% mutate(scaled.expression = expression) -> data.plot
  }
  min.exp <- SetQuantile(cutoff = min.exp, data = data.plot$scaled.expression)
  max.exp <- SetQuantile(cutoff = max.exp, data = data.plot$scaled.expression)
  data.plot$gene <- factor(x = data.plot$gene, levels = features.plot)
  data.plot$scaled.expression <- MinMax(
    data = data.plot$scaled.expression,
    min = min.exp,
    max = max.exp
  )
  if (rotate.key) {
    key.direction <- "horizontal"
    key.title.pos <- "top"
  } else {
    key.direction <- "vertical"
    key.title.pos <- "left"
  }
  p <- ggplot(data = data.plot, mapping = aes(x = dim1, y = dim2)) +
    geom_point(mapping = aes(colour = scaled.expression), size = pt.size, shape = pch.use)
  if (rotate.key) {
    p <- p + scale_colour_gradient(
      low = cols.use[1],
      high = cols.use[2],
      guide = guide_colorbar(
        direction = key.direction,
        title.position = key.title.pos,
        title = "Scaled Expression"
      )
    )
  } else {
    p <- p + scale_colour_gradient(
      low = cols.use[1],
      high = cols.use[2],
      guide = guide_colorbar(title = "Scaled Expression")
    )
  }
  if(plot.horiz){
    p <- p + facet_grid(ident ~ gene)
  }
  else{
    p <- p + facet_grid(gene ~ ident)
  }
  p2 <- p +
    theme_bw() +
    NoGrid() +
    ylab(label = dim.codes[2]) +
    xlab(label = dim.codes[1])
  p2 <- p2 + theme(legend.position = key.position)
  if (do.return) {
    return(p2)
  }
  print(p2)
}

SetQuantile <- function(cutoff, data) {
  if (grepl(pattern = '^q[0-9]{1,2}$', x = as.character(x = cutoff), perl = TRUE)) {
    this.quantile <- as.numeric(x = sub(
      pattern = 'q',
      replacement = '',
      x = as.character(x = cutoff)
    )) / 100
    data <- unlist(x = data)
    data <- data[data > 0]
    cutoff <- quantile(x = data, probs = this.quantile)
  }
  return(as.numeric(x = cutoff))
}


NoGrid <- function(...) {
  no.grid <- theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    ...
  )
  return(no.grid)
}


## Plot expression of yellow module
Major_cell_type <- pers@meta.data$major_cell_type

Cell_type_ME = matrix(NA, length(colnames(mergedMEs)), length(unique(Major_cell_type))-1) 
rownames(Cell_type_ME) = sort(colnames(mergedMEs)) 
colnames(Cell_type_ME) <- sort(unique(Major_cell_type)[-4]) # Remove unknown cell types
ME_P <- Cell_type_ME

for (i in 1:ncol(Cell_type_ME)) {
  
  Cell_type <- colnames(Cell_type_ME)[i]
  idx <- which(Major_cell_type == Cell_type)
  
  for (j in 1:nrow(Cell_type_ME)) {
    Module <- rownames(Cell_type_ME)[j]
    Cell_type_ME[Module, i] <- mean(mergedMEs[idx, Module])
    ME_P[Module,i] <- t.test(mergedMEs[idx, Module], alternative = "greater")$p.value
  }
}


# Plot
Cell_type_names <- c("Astrocytes", "Endothelial cells", "Ependymal cells", "Microglia", "Neurons", 
                     "Oligodendrocytes", "OPCs", "Pars tuberalis cells", "Red blood cells",  "Tanycytes",
                     "VLMCs") 

rownames(Cell_type_ME) <- gsub("ME", "", rownames(Cell_type_ME))
Cell_type_ME_melt <- melt(Cell_type_ME)
colnames(Cell_type_ME_melt) <- c("Module", "Cell_type", "ME")
Cell_type_ME_melt$Module <- factor(Cell_type_ME_melt$Module, levels=sort(rownames(Cell_type_ME), decreasing = T))

ggplot(data = Cell_type_ME_melt, aes(x=Cell_type, y=Module, fill=ME)) + 
  geom_tile(border = "black") +  scale_fill_gradient2(low = "turquoise", high = "darkred", mid = "white", 
                                                      midpoint = 0, name="Mean ME") + 
  theme(axis.text.x = element_text(angle = 40, hjust = 1), axis.title = element_text(size = 15)) +
  xlab("Cell type") + scale_x_discrete(labels = Cell_type_names)
ggsave("Pers_heatmap.pdf", height = 6, width = 9)



## Calculate GO enrichment of Disease-associated modules
terms = data.frame()

for (m in gsub("ME", "", colnames(mergedMEs))) {
  
  ## GO Enrichment
  query =  rownames(t(ExprMat))[mergedColors==m]
  go <- gprofiler(query, organism="mmusculus", ordered_query = F, correction_method = "fdr", 
                  src_filter = c("GO", "KEGG"), max_set_size = 2000)
  
  go <- go[order(go$p.value),]
  
  module_name <- as.data.frame(rep(m, nrow(go)))
  
  terms <- rbind(terms, cbind(module_name, go))
}
colnames(terms)[1] <- "Module"


# Plot the most enriched term for each module
top_terms = data.frame()

for(m in 1:10) {
  idx = which(terms$Module == m) 
  top_terms = rbind(terms[idx[1],], top_terms)  
}


top_terms = data.frame()

col <- c("black", "brown", "cyan", "greenyellow", "midnightblue", "pink", "purple", "red", "salmon", "tan", "turquoise", "yellow") 
for (m in col) {
  idx = which(terms$Module == m) 
  top_terms = rbind(terms[idx[2:1],], top_terms)  
}


top_terms$term.name[7] <- "trancriptional activator activity"
top_terms2$term.name[8] <- "transcription factor activity"


pdf("Pers_all_cells_GO.pdf", width = 10, height=7)
par(oma=c(0,4,0,0), mar=c(5,10,2,5))
bp = barplot(-log10(top_terms$p.value), horiz=T, yaxt='n', col=as.character(top_terms$m), 
             xlab = expression(-log[10](Q)), cex.main=0.7, cex.axis = .7, border="black", xlim = c(0,120))
axis(2,at=bp, labels=top_terms$term.name, tick=FALSE, las=2, cex.axis=0.8)
abline(v=-log10(0.05), col="black", lwd=2, lty=2)
col <- c("brown", "black", "cyan", "greenyellow", "midnightblue", "pink", "purple", "red", "salmon", "tan", "turquoise", "yellow") 
legend("topright", y.intersp=1, fill = col, legend = col, title = "Module", title.adj = 0, box.col = "white")

